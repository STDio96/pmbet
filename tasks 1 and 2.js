// ============== task 1 ================

// все мат. знаки (кроме +) - выполняют вычисления, а '+' - конкатенацию (если есть строка)
console.log(2 + "2" == "2" + 2); // true | "22" == "22"? ДА :)
console.log(2 + "3" == "3" + 2); // false | "23" == "32"? НЕТ :(
console.log("3" + "2" == 3 + 2); // false | "32" == 5? НЕТ :(
console.log("3" + "2" == "3" + 2); // true | "32" == "32"? ДА :) 
console.log("3" + "2" == 2 + "3"); // false | "32" == "23"? НЕТ :(
console.log(2 + Number("3") == Number("3") + 2);
/*
    Number пробует преобразовать строку в число
    2 + 3 = 5
    3 + 2 = 5
    5 == 5? ДА :)

    ответ: true
*/

console.log(12 / "6"); // 2 - все мат. знаки (кроме +) - выполняют вычисления (пробуя преобразовать строку в число)
console.log("number" + 15 + 3); // number153 - простая конкатенация, т.к. сначало идет строка
console.log(15 + 3 + "number"); // 18number - 2 числа прибавляются как числа, а потом идет конкатенация
console.log([1] > null); // true - null равен (==) только undefined, чем [1] не является
console.log("foo" + + "bar");
/*
    + "bar" - то же самое, что и Number("bar") - попытка преобразования строки "bar" в число
    если преобразование не может быть выполнено, возвращается NaN
    "foo" + NaN == "fooNaN"

    ответ: "fooNaN"

*/
console.log('true' == true);
/*
    если один из операндов логический, то он преобразуется в 1 (если true) или 0 (если false)
    'true' == 1? НЕТ :(

    ответ: false
*/
console.log(false == 'false');
/*
    если один из операндов логический, то он преобразуется в 1 (если true) или 0 (если false)
    0 == 'false'? НЕТ :(

    ответ: false
*/
console.log(null == ''); // false - null равен (==) только undefined, чем пустая строка не является
console.log(!!"false" == !!"true");
/*
    любая строка (кроме пустой '') всегда true (если привести ее к boolean)
    ! - меняет true на false и наоборот, можно использовать многократно
    ! в этом случае, приводит строку к типу boolean сразу с значением false
    второй ! меняет предыдущее значение (false) на противоположное (true)
    true == true? ДА :)

    ответ: true
*/
console.log(['x'] == 'x');
/*
    на момент сравнения массив преобразовался в строку
    при этом его элементы просто идут друг за другом через запятую
    т.к. тут только 1 элемент массива, то значение преобразованной строки будет просто 'x'
    'x' == 'x'? ДА :)

    ответ: true
*/

// ============== task 2 ================

const enemy = {
    name: "Bob"
};

const friend = {
    name: "Alex"
};

const me = friend; // копируем (НЕ создаем отдельный!) по ссылке

me.name = "Bob"; // значение изменится и в новой переменной (me) и в основном объекте (friend)

console.log(friend.name); // Bob - получаем доступ к свойству name объекта friend, который был изменен по ссылке выше
// == и  === для объектов работают одинаково
console.log(me === friend); // true - т.к. обе переменные содержат ссылку на один и тот же объект
console.log(me === enemy);
/*
    хоть их значения и структура одинаковы, но это 2 разных (независимых) объекта
    поэтому выше я акцентировал внимание на том, что мы не создаем, а копируем по ссылке

    ответ: false
*/